// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define FOR_EACH_VEC(vecName, iteratorName) for ( int iteratorName = 0; iteratorName < (vecName).Count(); iteratorName++ )
#define FOR_EACH_VEC_BACK(vecName, iteratorName) for ( int iteratorName = (vecName).Count()-1; iteratorName >= 0; iteratorName-- )
#define FOR_EACH_SUBKEY( kvRoot, kvSubKey ) for ( KeyValues * kvSubKey = kvRoot->GetFirstSubKey(); kvSubKey != NULL; kvSubKey = kvSubKey->GetNextKey() )
#define FOR_EACH_TRUE_SUBKEY( kvRoot, kvSubKey ) for ( KeyValues * kvSubKey = kvRoot->GetFirstTrueSubKey(); kvSubKey != NULL; kvSubKey = kvSubKey->GetNextTrueSubKey() )
#define FOR_EACH_VALUE( kvRoot, kvValue ) for ( KeyValues * kvValue = kvRoot->GetFirstValue(); kvValue != NULL; kvValue = kvValue->GetNextValue() )
#define FOR_EACH_MAP( mapName, iteratorName ) for ( int iteratorName = (mapName).FirstInorder(); (mapName).IsUtlMap && iteratorName != (mapName).InvalidIndex(); iteratorName = (mapName).NextInorder( iteratorName ) )
#define FOR_EACH_MAP_FAST( mapName, iteratorName ) for ( int iteratorName = 0; (mapName).IsUtlMap && iteratorName < (mapName).MaxElement(); ++iteratorName ) if ( !(mapName).IsValidIndex( iteratorName ) ) continue; else
#define FOR_EACH_DICT( dictName, iteratorName ) for( int iteratorName=dictName.First(); iteratorName != dictName.InvalidIndex(); iteratorName = dictName.Next( iteratorName ) )
#define FOR_EACH_DICT_FAST( dictName, iteratorName ) for ( int iteratorName = 0; iteratorName < dictName.MaxElement(); ++iteratorName ) if ( !dictName.IsValidIndex( iteratorName ) ) continue; else
#define FOR_EACH_LL( listName, iteratorName ) for( int iteratorName=(listName).Head(); (listName).IsUtlLinkedList && iteratorName != (listName).InvalidIndex(); iteratorName = (listName).Next( iteratorName ) )
#define PRECACHE_REGISTER_FN(functionName) static CPrecacheRegister precache_function_##functionName(functionName, 0);
#define PRECACHE_WEAPON_REGISTER(className) static CPrecacheRegister precache_weapon_##className(&CPrecacheRegister::PrecacheFn_Other, #className)
#define PRECACHE_REGISTER(className) static CPrecacheRegister precache_other_##className( &CPrecacheRegister::PrecacheFn_Other, #className)
#define LINK_ENTITY_TO_CLASS(mapClassName, DLLClassName) 
#define LINK_ENTITY_TO_CLASS(localName, className) 
#define DECLARE_CLASS( className, baseClassName ) 
#define DECLARE_CLASS_GAMEROOT( className, baseClassName ) 
#define DECLARE_CLASS_NOFRIEND( className, baseClassName )
#define DECLARE_CLASS_NOBASE( className ) 
#define DECLARE_EMBEDDED_NETWORKVAR() 
#define DECLARE_NETWORKCLASS() DECLARE_SERVERCLASS()
#define DECLARE_NETWORKCLASS() DECLARE_CLIENTCLASS()
#define DECLARE_CLIENTCLASS() 
#define ALLOW_DATATABLES_PRIVATE_ACCESS() 
#define DECLARE_CLIENTCLASS_NOBASE ALLOW_DATATABLES_PRIVATE_ACCESS 
#define DECLARE_SERVERCLASS() 
#define DECLARE_SERVERCLASS_NOBASE() 
#define DECLARE_SIMPLE_DATADESC() 
#define DECLARE_DATADESC() DECLARE_SIMPLE_DATADESC() 
#define BEGIN_DATADESC_GUTS( className ) 
#define BEGIN_DATADESC(className) datamap_t className::m_DataMap = { 0, 0, #className, NULL }; datamap_t *className::GetDataDescMap( void ) { return &m_DataMap; } datamap_t *className::GetBaseMap() { datamap_t *pResult; DataMapAccess((BaseClass *)NULL, &pResult); return pResult; } BEGIN_DATADESC_GUTS( className )
#define BEGIN_DATADESC_NO_BASE( className ) datamap_t className::m_DataMap = { 0, 0, #className, NULL }; datamap_t *className::GetDataDescMap( void ) { return &m_DataMap; } datamap_t *className::GetBaseMap() { return NULL; } BEGIN_DATADESC_GUTS( className )
#define DEFINE_KEYFIELD(name, fieldtype, mapname) _FIELD(name, fieldtype, 1, FTYPEDESC_KEY | FTYPEDESC_SAVE, mapname, 0 )
#define DEFINE_INPUTFUNC(fieldtype, inputname, inputfunc) { fieldtype, #inputfunc, { NULL, NULL }, 1, FTYPEDESC_INPUT, inputname, NULL, static_cast <inputfunc_t> (&classNameTypedef::inputfunc) }
#define DEFINE_ENTITYFUNC(function) DEFINE_FUNCTION_RAW( function, ENTITYFUNCPTR )
#define END_DATADESC() }; if ( sizeof( dataDesc ) > sizeof( dataDesc[0] ) ) { classNameTypedef::m_DataMap.dataNumFields = SIZE_OF_ARRAY( dataDesc ) - 1; classNameTypedef::m_DataMap.dataDesc = &dataDesc[1]; } else { classNameTypedef::m_DataMap.dataNumFields = 1; classNameTypedef::m_DataMap.dataDesc = dataDesc; } return &classNameTypedef::m_DataMap; }
#define NETWORK_VAR_START( type, name ) 
#define NETWORK_VAR_END( type, name, base, stateChangedFn ) 
#define BEGIN_SEND_TABLE_NOBASE(className, tableName) 
#define BEGIN_SEND_TABLE(className, tableName) BEGIN_SEND_TABLE_NOBASE(className, tableName) SendPropDataTable("baseclass", 0, className::BaseClass::m_pClassSendTable, SendProxy_DataTableToDataTable),
#define BEGIN_RECV_TABLE_NOBASE(className, tableName) 
#define BEGIN_RECV_TABLE(className, tableName) BEGIN_RECV_TABLE_NOBASE(className, tableName) RecvPropDataTable("baseclass", 0, 0, className::BaseClass::m_pClassRecvTable, DataTableRecvProxy_StaticDataTable),
#define BEGIN_NETWORK_TABLE_NOBASE(className, tableName) 
#define BEGIN_NETWORK_TABLE(className, tableName) 
#define END_RECV_TABLE() }; RecvTable.Construct(RecvProps+1, sizeof(RecvProps) / sizeof(RecvProp) - 1, pRecvTableName); return 1; }
#define END_SEND_TABLE() }; sendTable.Construct(g_SendProps+1, sizeof(g_SendProps) / sizeof(SendProp) - 1, g_pSendTableName); return 1; } 
#define END_NETWORK_TABLE 
#define RECVINFO(varName) #varName, offsetof(currentRecvDTClass, varName), sizeof(((currentRecvDTClass*)0)->varName)
#define RECVINFO_NAME(varName, remoteVarName) #remoteVarName, offsetof(currentRecvDTClass, varName), sizeof(((currentRecvDTClass*)0)->varName)
#define RECVINFO_STRING(varName) #varName, offsetof(currentRecvDTClass, varName), STRINGBUFSIZE(currentRecvDTClass, varName)
#define RECVINFO_BASECLASS(tableName) RecvPropDataTable("this", 0, 0, &REFERENCE_RECV_TABLE(tableName))
#define RECVINFO_ARRAY(varName) #varName, offsetof(currentRecvDTClass, varName), sizeof(((currentRecvDTClass*)0)->varName[0]), sizeof(((currentRecvDTClass*)0)->varName)/sizeof(((currentRecvDTClass*)0)->varName[0])
#define RECVINFO_NOSIZE(varName) #varName, offsetof(currentRecvDTClass, varName)
#define RECVINFO_DT(varName) RECVINFO_NOSIZE(varName)
#define RECVINFO_DTNAME(varName,remoteVarName) #remoteVarName, offsetof(currentRecvDTClass, varName)
#define RECVINFO_UTLVECTOR( varName ) #varName, offsetof(currentRecvDTClass, varName), sizeof(((currentRecvDTClass*)0)->varName[0]), GetResizeUtlVectorTemplate( ((currentRecvDTClass*)0)->varName ), GetEnsureCapacityTemplate( ((currentRecvDTClass*)0)->varName )
#define SENDINFO(varName) #varName, offsetof(currentSendDTClass::MakeANetworkVar_##varName, varName), sizeof(((currentSendDTClass*)0)->varName)
#define SENDINFO_ARRAY(varName) #varName, offsetof(currentSendDTClass::MakeANetworkVar_##varName, varName), sizeof(((currentSendDTClass*)0)->varName[0])
#define SENDINFO_ARRAY3(varName) #varName, offsetof(currentSendDTClass::MakeANetworkVar_##varName, varName), sizeof(((currentSendDTClass*)0)->varName[0]), sizeof(((currentSendDTClass*)0)->varName)/sizeof(((currentSendDTClass*)0)->varName[0])
#define SENDINFO_ARRAYELEM(varName, i #varName "[" #i "]", offsetof(currentSendDTClass::MakeANetworkVar_##varName, varName[i]), sizeof(((currentSendDTClass*)0)->varName[0])
#define SENDINFO_NETWORKARRAYELEM(varName, i) #varName "[" #i "]", offsetof(currentSendDTClass::MakeANetworkVar_##varName, varName.m_Value[i]), sizeof(((currentSendDTClass*)0)->varName.m_Value[0])
#define SENDINFO_VECTORELEM(varName, i) #varName "[" #i "]", -(int)offsetof(currentSendDTClass::MakeANetworkVar_##varName, varName.m_Value[i]), sizeof(((currentSendDTClass*)0)->varName.m_Value[0])
#define SENDINFO_STRUCTELEM(varName) #varName, offsetof(currentSendDTClass, varName), sizeof(((currentSendDTClass*)0)->varName.m_Value)
#define SENDINFO_STRUCTARRAYELEM(varName, i) #varName "[" #i "]", offsetof(currentSendDTClass, varName.m_Value[i]), sizeof(((currentSendDTClass*)0)->varName.m_Value[0])
#define SENDINFO_NOCHECK(varName) #varName, offsetof(currentSendDTClass, varName), sizeof(((currentSendDTClass*)0)->varName)
#define SENDINFO_STRING_NOCHECK(varName) #varName, offsetof(currentSendDTClass, varName)
#define SENDINFO_DT(varName) #varName, offsetof(currentSendDTClass, varName)
#define SENDINFO_DT_NAME(varName, remoteVarName) #remoteVarName, offsetof(currentSendDTClass, varName)
#define SENDINFO_NAME(varName,remoteVarName) #remoteVarName, offsetof(currentSendDTClass, varName), sizeof(((currentSendDTClass*)0)->varName)
#define SENDINFO_UTLVECTOR( varName ) #varName, offsetof(currentSendDTClass, varName), sizeof(((currentSendDTClass*)0)->varName[0]), GetEnsureCapacityTemplate( ((currentSendDTClass*)0)->varName )
#define RecvPropUtlVectorDataTable( varName, nMaxElements, dataTableName ) RecvPropUtlVector( RECVINFO_UTLVECTOR( varName ), nMaxElements, RecvPropDataTable(NULL,0,0, &REFERENCE_RECV_TABLE( dataTableName  ) ) )
#define SendPropUtlVectorDataTable( varName, nMaxElements, dataTableName ) SendPropUtlVector( SENDINFO_UTLVECTOR( varName ), nMaxElements, SendPropDataTable( NULL, 0, &REFERENCE_SEND_TABLE( dataTableName ) ) )
#define CNetworkVar( type, name ) NETWORK_VAR_START( type, name ) NETWORK_VAR_END( type, name, CNetworkVarBase, NetworkStateChanged )
#define CNetworkHandle( name )
#define CNetworkVector( name )
#define CNetworkQAngle( name )
#define CNetworkVarEmbedded( type, name ) class NetworkVar_##name; friend class NetworkVar_##name; static inline int GetOffset_##name() { return MyOffsetOf(ThisClass,name); } typedef ThisClass ThisClass_##name; class NetworkVar_##name : public type { template< class T > NetworkVar_##name& operator=( const T &val ) { *((type*)this) = val; return *this; } public: void CopyFrom( const type &src ) { *((type *)this) = src; NetworkStateChanged(); } virtual void NetworkStateChanged() { DispatchNetworkStateChanged( (ThisClass_##name*)( ((char*)this) - GetOffset_##name() ) ); } virtual void NetworkStateChanged( void *pVar ) { DispatchNetworkStateChanged( (ThisClass_##name*)( ((char*)this) - GetOffset_##name() ), pVar ); } }; NetworkVar_##name name; 
#define CON_COMMAND_F(name, description, flags) static void name( const CCommand &args ); static ConCommand name##_command( #name, name, description, flags ); static void name( const CCommand &args )
#define OVERRIDE
#define REFERENCE_SEND_TABLE(tableName)
#define IMPLEMENT_SERVERCLASS_INTERNAL( DLLClassName, sendTable ) namespace sendTable { struct ignored; extern SendTable g_SendTable; } CHECK_DECLARE_CLASS( DLLClassName, sendTable ) static ServerClass g_##DLLClassName##_ClassReg( #DLLClassName, &sendTable::g_SendTable ); ServerClass* DLLClassName::GetServerClass() { return &g_##DLLClassName##_ClassReg; } SendTable *DLLClassName::m_pClassSendTable = &sendTable::g_SendTable; int DLLClassName::YouForgotToImplementOrDeclareServerClass() { return 0; }
#define IMPLEMENT_SERVERCLASS( DLLClassName, sendTable ) IMPLEMENT_SERVERCLASS_INTERNAL( DLLClassName, sendTable )
#define IMPLEMENT_SERVERCLASS_ST(DLLClassName, sendTable) IMPLEMENT_SERVERCLASS_INTERNAL( DLLClassName, sendTable ) BEGIN_SEND_TABLE(DLLClassName, sendTable)
#define IMPLEMENT_SERVERCLASS_ST_NOBASE(DLLClassName, sendTable) IMPLEMENT_SERVERCLASS_INTERNAL( DLLClassName, sendTable ) BEGIN_SEND_TABLE_NOBASE( DLLClassName, sendTable )
#define INTERNAL_IMPLEMENT_CLIENTCLASS_PROLOGUE(clientClassName, dataTable, serverClassName) namespace dataTable { extern RecvTable g_RecvTable; } extern ClientClass __g_##clientClassName##ClientClass; RecvTable* clientClassName::m_pClassRecvTable = &dataTable::g_RecvTable; int clientClassName::YouForgotToImplementOrDeclareClientClass() { return 0; } ClientClass* clientClassName::GetClientClass() { return &__g_##clientClassName##ClientClass; }
#define IMPLEMENT_CLIENTCLASS(clientClassName, dataTable, serverClassName) INTERNAL_IMPLEMENT_CLIENTCLASS_PROLOGUE(clientClassName, dataTable, serverClassName) static IClientNetworkable* _##clientClassName##_CreateObject( int entnum, int serialNum ) { clientClassName *pRet = new clientClassName; if ( !pRet ) return 0; pRet->Init( entnum, serialNum ); return pRet; } ClientClass __g_##clientClassName##ClientClass( #serverClassName, _##clientClassName##_CreateObject, NULL, &dataTable::g_RecvTable );
#define IMPLEMENT_CLIENTCLASS_DT(clientClassName, dataTable, serverClassName) IMPLEMENT_CLIENTCLASS(clientClassName, dataTable, serverClassName) BEGIN_RECV_TABLE(clientClassName, dataTable)
#define IMPLEMENT_CLIENTCLASS_DT_NOBASE(clientClassName, dataTable, serverClassName) IMPLEMENT_CLIENTCLASS(clientClassName, dataTable, serverClassName) BEGIN_RECV_TABLE_NOBASE(clientClassName, dataTable)
#define IMPLEMENT_NETWORKCLASS_ALIASED(className, dataTable) IMPLEMENT_CLIENTCLASS( C_##className, dataTable, C##className )
#define IMPLEMENT_NETWORKCLASS_ALIASED(className, dataTable) IMPLEMENT_SERVERCLASS( C##className, dataTable )
#define BEGIN_PREDICTION_DATA(className) datamap_t className::m_PredMap = { 0, 0, #className, &BaseClass::m_PredMap }; datamap_t *className::GetPredDescMap( void ) { return &m_PredMap; } BEGIN_PREDICTION_DATA_GUTS( className )
#define BEGIN_PREDICTION_DATA(className) template <> inline datamap_t *PredMapInit<className>( className * ) { if ( 0 ) { typedef className classNameTypedef; typedescription_t predDesc[] = { { FIELD_VOID,0, {0,0},0,0,0,0,0,0},
#define BEGIN_PREDICTION_DATA(className)
#define END_PREDICTION_DATA() }; if ( sizeof( predDesc ) > sizeof( predDesc[0] ) ) { classNameTypedef::m_PredMap.dataNumFields = ARRAYSIZE( predDesc ) - 1; classNameTypedef::m_PredMap.dataDesc = &predDesc[1]; } else { classNameTypedef::m_PredMap.dataNumFields = 1; classNameTypedef::m_PredMap.dataDesc = predDesc; } return &classNameTypedef::m_PredMap; }
#define END_PREDICTION_DATA() }; predDesc[0].flags = 0; } }
#define END_PREDICTION_DATA()
#define CREATE_SIMPLE_WEAPON_TABLE(WpnName, entityname) IMPLEMENT_NETWORKCLASS_ALIASED( WpnName, DT_##WpnName ) BEGIN_NETWORK_TABLE( C##WpnName, DT_##WpnName ) END_NETWORK_TABLE() BEGIN_PREDICTION_DATA( C##WpnName ) END_PREDICTION_DATA() LINK_ENTITY_TO_CLASS( entityname, C##WpnName ); PRECACHE_WEAPON_REGISTER( entityname );
#define IMPLEMENT_INTENTION_INTERFACE( Actor, InitialAction ) Actor::Actor##Intention::Actor##Intention( Actor *me ) : IIntention( me )	{ m_behavior = new Behavior< Actor >( new InitialAction ); } Actor::Actor##Intention::~Actor##Intention() {	delete m_behavior; } void Actor::Actor##Intention::Reset( void ) { delete m_behavior; m_behavior = new Behavior< Actor >( new InitialAction ); }	void Actor::Actor##Intention::Update( void ) { m_behavior->Update( static_cast< Actor * >( GetBot() ), GetUpdateInterval() ); }
#define DEFINE_THINKFUNC(function) DEFINE_FUNCTION_RAW( function, BASEPTR )
#define DEFINE_FIELD(name, fieldtype) _FIELD(name, fieldtype, 1, FTYPEDESC_SAVE, NULL, 0 )
